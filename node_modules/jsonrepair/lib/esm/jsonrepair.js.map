{"version":3,"file":"jsonrepair.js","names":["JSONRepairError","codeAsterisk","codeBackslash","codeCloseParenthesis","codeClosingBrace","codeClosingBracket","codeColon","codeComma","codeDot","codeDoubleQuote","codeLowercaseE","codeMinus","codeNewline","codeOpeningBrace","codeOpeningBracket","codeOpenParenthesis","codePlus","codeSemicolon","codeSlash","codeUppercaseE","codeZero","endsWithCommaOrNewline","insertBeforeLastWhitespace","isControlCharacter","isDelimiter","isDigit","isDoubleQuote","isDoubleQuoteLike","isHex","isNonZeroDigit","isQuote","isSingleQuoteLike","isSpecialWhitespace","isStartOfValue","isValidStringCharacter","isWhitespace","removeAtIndex","stripLastOccurrence","controlCharacters","escapeCharacters","b","f","n","r","t","jsonrepair","text","i","output","processed","parseValue","throwUnexpectedEnd","processedComma","parseCharacter","parseWhitespaceAndSkipComments","parseNewlineDelimitedJSON","length","throwUnexpectedCharacter","parseObject","parseArray","parseString","parseNumber","parseKeywords","parseUnquotedString","start","changed","parseWhitespace","parseComment","whitespace","normal","charCodeAt","atEndOfBlockComment","code","skipCharacter","skipEscapeCharacter","initial","processedKey","undefined","throwObjectKeyExpected","processedColon","throwColonExpected","processedValue","concat","skipEscapeChars","isEndQuote","char","escapeChar","slice","throwInvalidUnicodeCharacter","throwInvalidCharacter","parseConcatenatedString","expectDigitOrRepair","parseKeyword","name","value","symbol","JSON","stringify","expectDigit","numSoFar","got","end","test","chars"],"sources":["../../src/jsonrepair.ts"],"sourcesContent":["import { JSONRepairError } from './JSONRepairError.js'\nimport {\n  codeAsterisk,\n  codeBackslash,\n  codeCloseParenthesis,\n  codeClosingBrace,\n  codeClosingBracket,\n  codeColon,\n  codeComma,\n  codeDot,\n  codeDoubleQuote,\n  codeLowercaseE,\n  codeMinus,\n  codeNewline,\n  codeOpeningBrace,\n  codeOpeningBracket,\n  codeOpenParenthesis,\n  codePlus,\n  codeSemicolon,\n  codeSlash,\n  codeUppercaseE,\n  codeZero,\n  endsWithCommaOrNewline,\n  insertBeforeLastWhitespace,\n  isControlCharacter,\n  isDelimiter,\n  isDigit,\n  isDoubleQuote,\n  isDoubleQuoteLike,\n  isHex,\n  isNonZeroDigit,\n  isQuote,\n  isSingleQuoteLike,\n  isSpecialWhitespace,\n  isStartOfValue,\n  isValidStringCharacter,\n  isWhitespace,\n  removeAtIndex,\n  stripLastOccurrence\n} from './stringUtils.js'\n\nconst controlCharacters: { [key: string]: string } = {\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t'\n}\n\n// map with all escape characters\nconst escapeCharacters: { [key: string]: string } = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\n/**\n * Repair a string containing an invalid JSON document.\n * For example changes JavaScript notation into JSON notation.\n *\n * Example:\n *\n *     try {\n *       const json = \"{name: 'John'}\"\n *       const repaired = jsonrepair(json)\n *       console.log(repaired)\n *       // '{\"name\": \"John\"}'\n *     } catch (err) {\n *       console.error(err)\n *     }\n *\n */\nexport function jsonrepair(text: string): string {\n  let i = 0 // current index in text\n  let output = '' // generated output\n\n  const processed = parseValue()\n  if (!processed) {\n    throwUnexpectedEnd()\n  }\n\n  const processedComma = parseCharacter(codeComma)\n  if (processedComma) {\n    parseWhitespaceAndSkipComments()\n  }\n\n  if (isStartOfValue(text[i]) && endsWithCommaOrNewline(output)) {\n    // start of a new value after end of the root level object: looks like\n    // newline delimited JSON -> turn into a root level array\n    if (!processedComma) {\n      // repair missing comma\n      output = insertBeforeLastWhitespace(output, ',')\n    }\n\n    parseNewlineDelimitedJSON()\n  } else if (processedComma) {\n    // repair: remove trailing comma\n    output = stripLastOccurrence(output, ',')\n  }\n\n  if (i >= text.length) {\n    // reached the end of the document properly\n    return output\n  }\n\n  throwUnexpectedCharacter()\n\n  function parseValue(): boolean {\n    parseWhitespaceAndSkipComments()\n    const processed =\n      parseObject() ||\n      parseArray() ||\n      parseString() ||\n      parseNumber() ||\n      parseKeywords() ||\n      parseUnquotedString()\n    parseWhitespaceAndSkipComments()\n\n    return processed\n  }\n\n  function parseWhitespaceAndSkipComments(): boolean {\n    const start = i\n\n    let changed = parseWhitespace()\n    do {\n      changed = parseComment()\n      if (changed) {\n        changed = parseWhitespace()\n      }\n    } while (changed)\n\n    return i > start\n  }\n\n  function parseWhitespace(): boolean {\n    let whitespace = ''\n    let normal: boolean\n    while ((normal = isWhitespace(text.charCodeAt(i))) || isSpecialWhitespace(text.charCodeAt(i))) {\n      if (normal) {\n        whitespace += text[i]\n      } else {\n        // repair special whitespace\n        whitespace += ' '\n      }\n\n      i++\n    }\n\n    if (whitespace.length > 0) {\n      output += whitespace\n      return true\n    }\n\n    return false\n  }\n\n  function parseComment(): boolean {\n    // find a block comment '/* ... */'\n    if (text.charCodeAt(i) === codeSlash && text.charCodeAt(i + 1) === codeAsterisk) {\n      // repair block comment by skipping it\n      while (i < text.length && !atEndOfBlockComment(text, i)) {\n        i++\n      }\n      i += 2\n\n      return true\n    }\n\n    // find a line comment '// ...'\n    if (text.charCodeAt(i) === codeSlash && text.charCodeAt(i + 1) === codeSlash) {\n      // repair line comment by skipping it\n      while (i < text.length && text.charCodeAt(i) !== codeNewline) {\n        i++\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  function parseCharacter(code: number): boolean {\n    if (text.charCodeAt(i) === code) {\n      output += text[i]\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipCharacter(code: number): boolean {\n    if (text.charCodeAt(i) === code) {\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipEscapeCharacter(): boolean {\n    return skipCharacter(codeBackslash)\n  }\n\n  /**\n   * Parse an object like '{\"key\": \"value\"}'\n   */\n  function parseObject(): boolean {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      output += '{'\n      i++\n      parseWhitespaceAndSkipComments()\n\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        let processedComma\n        if (!initial) {\n          processedComma = parseCharacter(codeComma)\n          if (!processedComma) {\n            // repair missing comma\n            output = insertBeforeLastWhitespace(output, ',')\n          }\n          parseWhitespaceAndSkipComments()\n        } else {\n          processedComma = true\n          initial = false\n        }\n\n        const processedKey = parseString() || parseUnquotedString()\n        if (!processedKey) {\n          if (\n            text.charCodeAt(i) === codeClosingBrace ||\n            text.charCodeAt(i) === codeOpeningBrace ||\n            text.charCodeAt(i) === codeClosingBracket ||\n            text.charCodeAt(i) === codeOpeningBracket ||\n            text[i] === undefined\n          ) {\n            // repair trailing comma\n            output = stripLastOccurrence(output, ',')\n          } else {\n            throwObjectKeyExpected()\n          }\n          break\n        }\n\n        parseWhitespaceAndSkipComments()\n        const processedColon = parseCharacter(codeColon)\n        if (!processedColon) {\n          if (isStartOfValue(text[i])) {\n            // repair missing colon\n            output = insertBeforeLastWhitespace(output, ':')\n          } else {\n            throwColonExpected()\n          }\n        }\n        const processedValue = parseValue()\n        if (!processedValue) {\n          if (processedColon) {\n            // repair missing object value\n            output += 'null'\n          } else {\n            throwColonExpected()\n          }\n        }\n      }\n\n      if (text.charCodeAt(i) === codeClosingBrace) {\n        output += '}'\n        i++\n      } else {\n        // repair missing end bracket\n        output = insertBeforeLastWhitespace(output, '}')\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse an array like '[\"item1\", \"item2\", ...]'\n   */\n  function parseArray(): boolean {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      output += '['\n      i++\n      parseWhitespaceAndSkipComments()\n\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          const processedComma = parseCharacter(codeComma)\n          if (!processedComma) {\n            // repair missing comma\n            output = insertBeforeLastWhitespace(output, ',')\n          }\n        } else {\n          initial = false\n        }\n\n        const processedValue = parseValue()\n        if (!processedValue) {\n          // repair trailing comma\n          output = stripLastOccurrence(output, ',')\n          break\n        }\n      }\n\n      if (text.charCodeAt(i) === codeClosingBracket) {\n        output += ']'\n        i++\n      } else {\n        // repair missing closing array bracket\n        output = insertBeforeLastWhitespace(output, ']')\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse and repair Newline Delimited JSON (NDJSON):\n   * multiple JSON objects separated by a newline character\n   */\n  function parseNewlineDelimitedJSON() {\n    // repair NDJSON\n    let initial = true\n    let processedValue = true\n    while (processedValue) {\n      if (!initial) {\n        // parse optional comma, insert when missing\n        const processedComma = parseCharacter(codeComma)\n        if (!processedComma) {\n          // repair: add missing comma\n          output = insertBeforeLastWhitespace(output, ',')\n        }\n      } else {\n        initial = false\n      }\n\n      processedValue = parseValue()\n    }\n\n    if (!processedValue) {\n      // repair: remove trailing comma\n      output = stripLastOccurrence(output, ',')\n    }\n\n    // repair: wrap the output inside array brackets\n    output = `[\\n${output}\\n]`\n  }\n\n  /**\n   * Parse a string enclosed by double quotes \"...\". Can contain escaped quotes\n   * Repair strings enclosed in single quotes or special quotes\n   * Repair an escaped string\n   */\n  function parseString(): boolean {\n    let skipEscapeChars = text.charCodeAt(i) === codeBackslash\n    if (skipEscapeChars) {\n      // repair: remove the first escape character\n      i++\n      skipEscapeChars = true\n    }\n\n    if (isQuote(text.charCodeAt(i))) {\n      const isEndQuote = isSingleQuoteLike(text.charCodeAt(i))\n        ? isSingleQuoteLike\n        : isDoubleQuote(text.charCodeAt(i))\n        ? isDoubleQuote // eslint-disable-line indent\n        : isDoubleQuoteLike // eslint-disable-line indent\n\n      output += '\"'\n      i++\n\n      while (i < text.length && !isEndQuote(text.charCodeAt(i))) {\n        if (text.charCodeAt(i) === codeBackslash) {\n          const char = text[i + 1]\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            output += text.slice(i, i + 2)\n            i += 2\n          } else if (char === 'u') {\n            if (\n              isHex(text.charCodeAt(i + 2)) &&\n              isHex(text.charCodeAt(i + 3)) &&\n              isHex(text.charCodeAt(i + 4)) &&\n              isHex(text.charCodeAt(i + 5))\n            ) {\n              output += text.slice(i, i + 6)\n              i += 6\n            } else {\n              throwInvalidUnicodeCharacter(i)\n            }\n          } else {\n            // repair invalid escape character: remove it\n            output += char\n            i += 2\n          }\n        } else {\n          const char = text[i]\n          const code = text.charCodeAt(i)\n\n          if (code === codeDoubleQuote && text.charCodeAt(i - 1) !== codeBackslash) {\n            // repair unescaped double quote\n            output += '\\\\' + char\n            i++\n          } else if (isControlCharacter(code)) {\n            // unescaped control character\n            output += controlCharacters[char]\n            i++\n          } else {\n            if (!isValidStringCharacter(code)) {\n              throwInvalidCharacter(char)\n            }\n            output += char\n            i++\n          }\n        }\n\n        if (skipEscapeChars) {\n          const processed = skipEscapeCharacter()\n          if (processed) {\n            // repair: skipped escape character (nothing to do)\n          }\n        }\n      }\n\n      if (isQuote(text.charCodeAt(i))) {\n        if (text.charCodeAt(i) !== codeDoubleQuote) {\n          // repair non-normalized quote\n        }\n        output += '\"'\n        i++\n      } else {\n        // repair missing end quote\n        output += '\"'\n      }\n\n      parseConcatenatedString()\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Repair concatenated strings like \"hello\" + \"world\", change this into \"helloworld\"\n   */\n  function parseConcatenatedString(): boolean {\n    let processed = false\n\n    parseWhitespaceAndSkipComments()\n    while (text.charCodeAt(i) === codePlus) {\n      processed = true\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: remove the end quote of the first string\n      output = stripLastOccurrence(output, '\"', true)\n      const start = output.length\n      parseString()\n\n      // repair: remove the start quote of the second string\n      output = removeAtIndex(output, start, 1)\n    }\n\n    return processed\n  }\n\n  /**\n   * Parse a number like 2.4 or 2.4e6\n   */\n  function parseNumber(): boolean {\n    const start = i\n    if (text.charCodeAt(i) === codeMinus) {\n      i++\n      if (expectDigitOrRepair(start)) {\n        return true\n      }\n    }\n\n    if (text.charCodeAt(i) === codeZero) {\n      i++\n    } else if (isNonZeroDigit(text.charCodeAt(i))) {\n      i++\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (text.charCodeAt(i) === codeDot) {\n      i++\n      if (expectDigitOrRepair(start)) {\n        return true\n      }\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++\n      }\n      if (expectDigitOrRepair(start)) {\n        return true\n      }\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (i > start) {\n      output += text.slice(start, i)\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse keywords true, false, null\n   * Repair Python keywords True, False, None\n   */\n  function parseKeywords(): boolean {\n    return (\n      parseKeyword('true', 'true') ||\n      parseKeyword('false', 'false') ||\n      parseKeyword('null', 'null') ||\n      // repair Python keywords True, False, None\n      parseKeyword('True', 'true') ||\n      parseKeyword('False', 'false') ||\n      parseKeyword('None', 'null')\n    )\n  }\n\n  function parseKeyword(name: string, value: string): boolean {\n    if (text.slice(i, i + name.length) === name) {\n      output += value\n      i += name.length\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Repair and unquoted string by adding quotes around it\n   * Repair a MongoDB function call like NumberLong(\"2\")\n   * Repair a JSONP function call like callback({...});\n   */\n  function parseUnquotedString() {\n    // note that the symbol can end with whitespaces: we stop at the next delimiter\n    const start = i\n    while (i < text.length && !isDelimiter(text[i])) {\n      i++\n    }\n\n    if (i > start) {\n      if (text.charCodeAt(i) === codeOpenParenthesis) {\n        // repair a MongoDB function call like NumberLong(\"2\")\n        // repair a JSONP function call like callback({...});\n        i++\n\n        parseValue()\n\n        if (text.charCodeAt(i) === codeCloseParenthesis) {\n          // repair: skip close bracket of function call\n          i++\n          if (text.charCodeAt(i) === codeSemicolon) {\n            // repair: skip semicolon after JSONP call\n            i++\n          }\n        }\n\n        return true\n      } else {\n        // repair unquoted string\n\n        // first, go back to prevent getting trailing whitespaces in the string\n        while (isWhitespace(text.charCodeAt(i - 1)) && i > 0) {\n          i--\n        }\n\n        const symbol = text.slice(start, i)\n        output += symbol === 'undefined' ? 'null' : JSON.stringify(symbol)\n\n        return true\n      }\n    }\n  }\n\n  function expectDigit(start: number) {\n    if (!isDigit(text.charCodeAt(i))) {\n      const numSoFar = text.slice(start, i)\n      throw new JSONRepairError(`Invalid number '${numSoFar}', expecting a digit ${got()}`, 2)\n    }\n  }\n\n  function expectDigitOrRepair(start: number) {\n    if (i >= text.length) {\n      // repair numbers cut off at the end\n      // this will only be called when we end after a '.', '-', or 'e' and does not\n      // change the number more than it needs to make it valid JSON\n      output += text.slice(start, i) + '0'\n      return true\n    } else {\n      expectDigit(start)\n      return false\n    }\n  }\n\n  function throwInvalidCharacter(char: string) {\n    throw new JSONRepairError('Invalid character ' + JSON.stringify(char), i)\n  }\n\n  function throwUnexpectedCharacter() {\n    throw new JSONRepairError('Unexpected character ' + JSON.stringify(text[i]), i)\n  }\n\n  function throwUnexpectedEnd() {\n    throw new JSONRepairError('Unexpected end of json string', text.length)\n  }\n\n  function throwObjectKeyExpected() {\n    throw new JSONRepairError('Object key expected', i)\n  }\n\n  function throwColonExpected() {\n    throw new JSONRepairError('Colon expected', i)\n  }\n\n  function throwInvalidUnicodeCharacter(start: number) {\n    let end = start + 2\n    while (/\\w/.test(text[end])) {\n      end++\n    }\n    const chars = text.slice(start, end)\n    throw new JSONRepairError(`Invalid unicode character \"${chars}\"`, i)\n  }\n\n  function got(): string {\n    return text[i] ? `but got '${text[i]}'` : 'but reached end of input'\n  }\n}\n\nfunction atEndOfBlockComment(text: string, i: number) {\n  return text[i] === '*' && text[i + 1] === '/'\n}\n"],"mappings":"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"}