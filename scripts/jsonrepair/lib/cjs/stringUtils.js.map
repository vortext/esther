{"version":3,"file":"stringUtils.js","names":["codeBackslash","exports","codeSlash","codeAsterisk","codeOpeningBrace","codeClosingBrace","codeOpeningBracket","codeClosingBracket","codeOpenParenthesis","codeCloseParenthesis","codeSpace","codeNewline","codeTab","codeReturn","codeBackspace","codeFormFeed","codeDoubleQuote","codePlus","codeMinus","codeQuote","codeZero","codeOne","codeNine","codeComma","codeDot","codeColon","codeSemicolon","codeUppercaseA","codeLowercaseA","codeUppercaseE","codeLowercaseE","codeUppercaseF","codeLowercaseF","codeNonBreakingSpace","codeEnQuad","codeHairSpace","codeNarrowNoBreakSpace","codeMediumMathematicalSpace","codeIdeographicSpace","codeDoubleQuoteLeft","codeDoubleQuoteRight","codeQuoteLeft","codeQuoteRight","codeGraveAccent","codeAcuteAccent","isHex","code","isDigit","isNonZeroDigit","isValidStringCharacter","isDelimiter","char","regexDelimiter","test","isQuote","charCodeAt","isStartOfValue","regexStartOfValue","isControlCharacter","isWhitespace","isSpecialWhitespace","isDoubleQuoteLike","isSingleQuoteLike","isDoubleQuote","stripLastOccurrence","text","textToStrip","stripRemainingText","arguments","length","undefined","index","lastIndexOf","substring","insertBeforeLastWhitespace","textToInsert","removeAtIndex","start","count","endsWithCommaOrNewline"],"sources":["../../src/stringUtils.ts"],"sourcesContent":["// TODO: sort the codes\nexport const codeBackslash = 0x5c // \"\\\"\nexport const codeSlash = 0x2f // \"/\"\nexport const codeAsterisk = 0x2a // \"*\"\nexport const codeOpeningBrace = 0x7b // \"{\"\nexport const codeClosingBrace = 0x7d // \"}\"\nexport const codeOpeningBracket = 0x5b // \"[\"\nexport const codeClosingBracket = 0x5d // \"]\"\nexport const codeOpenParenthesis = 0x28 // \"(\"\nexport const codeCloseParenthesis = 0x29 // \")\"\nexport const codeSpace = 0x20 // \" \"\nexport const codeNewline = 0xa // \"\\n\"\nexport const codeTab = 0x9 // \"\\t\"\nexport const codeReturn = 0xd // \"\\r\"\nexport const codeBackspace = 0x08 // \"\\b\"\nexport const codeFormFeed = 0x0c // \"\\f\"\nexport const codeDoubleQuote = 0x0022 // \"\nexport const codePlus = 0x2b // \"+\"\nexport const codeMinus = 0x2d // \"-\"\nexport const codeQuote = 0x27 // \"'\"\nexport const codeZero = 0x30\nexport const codeOne = 0x31\nexport const codeNine = 0x39\nexport const codeComma = 0x2c // \",\"\nexport const codeDot = 0x2e // \".\" (dot, period)\nexport const codeColon = 0x3a // \":\"\nexport const codeSemicolon = 0x3b // \";\"\nexport const codeUppercaseA = 0x41 // \"A\"\nexport const codeLowercaseA = 0x61 // \"a\"\nexport const codeUppercaseE = 0x45 // \"E\"\nexport const codeLowercaseE = 0x65 // \"e\"\nexport const codeUppercaseF = 0x46 // \"F\"\nexport const codeLowercaseF = 0x66 // \"f\"\nconst codeNonBreakingSpace = 0xa0\nconst codeEnQuad = 0x2000\nconst codeHairSpace = 0x200a\nconst codeNarrowNoBreakSpace = 0x202f\nconst codeMediumMathematicalSpace = 0x205f\nconst codeIdeographicSpace = 0x3000\nconst codeDoubleQuoteLeft = 0x201c // “\nconst codeDoubleQuoteRight = 0x201d // ”\nconst codeQuoteLeft = 0x2018 // ‘\nconst codeQuoteRight = 0x2019 // ’\nconst codeGraveAccent = 0x0060 // `\nconst codeAcuteAccent = 0x00b4 // ´\n\nexport function isHex(code: number): boolean {\n  return (\n    (code >= codeZero && code <= codeNine) ||\n    (code >= codeUppercaseA && code <= codeUppercaseF) ||\n    (code >= codeLowercaseA && code <= codeLowercaseF)\n  )\n}\n\nexport function isDigit(code: number): boolean {\n  return code >= codeZero && code <= codeNine\n}\n\nexport function isNonZeroDigit(code: number): boolean {\n  return code >= codeOne && code <= codeNine\n}\n\nexport function isValidStringCharacter(code: number): boolean {\n  return code >= 0x20 && code <= 0x10ffff\n}\n\nexport function isDelimiter(char: string): boolean {\n  return regexDelimiter.test(char) || (char && isQuote(char.charCodeAt(0)))\n}\n\nconst regexDelimiter = /^[,:[\\]{}()\\n]$/\n\nexport function isStartOfValue(char: string): boolean {\n  return regexStartOfValue.test(char) || (char && isQuote(char.charCodeAt(0)))\n}\n\n// alpha, number, minus, or opening bracket or brace\nconst regexStartOfValue = /^[[{\\w-]$/\n\nexport function isControlCharacter(code: number) {\n  return (\n    code === codeNewline ||\n    code === codeReturn ||\n    code === codeTab ||\n    code === codeBackspace ||\n    code === codeFormFeed\n  )\n}\n\n/**\n * Check if the given character is a whitespace character like space, tab, or\n * newline\n */\nexport function isWhitespace(code: number): boolean {\n  return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn\n}\n\n/**\n * Check if the given character is a special whitespace character, some\n * unicode variant\n */\nexport function isSpecialWhitespace(code: number): boolean {\n  return (\n    code === codeNonBreakingSpace ||\n    (code >= codeEnQuad && code <= codeHairSpace) ||\n    code === codeNarrowNoBreakSpace ||\n    code === codeMediumMathematicalSpace ||\n    code === codeIdeographicSpace\n  )\n}\n\n/**\n * Test whether the given character is a quote or double quote character.\n * Also tests for special variants of quotes.\n */\nexport function isQuote(code: number): boolean {\n  // the first check double quotes, since that occurs most often\n  return isDoubleQuoteLike(code) || isSingleQuoteLike(code)\n}\n\n/**\n * Test whether the given character is a double quote character.\n * Also tests for special variants of double quotes.\n */\nexport function isDoubleQuoteLike(code: number): boolean {\n  // the first check double quotes, since that occurs most often\n  return code === codeDoubleQuote || code === codeDoubleQuoteLeft || code === codeDoubleQuoteRight\n}\n\n/**\n * Test whether the given character is a double quote character.\n * Does NOT test for special variants of double quotes.\n */\nexport function isDoubleQuote(code: number): boolean {\n  return code === codeDoubleQuote\n}\n\n/**\n * Test whether the given character is a single quote character.\n * Also tests for special variants of single quotes.\n */\nexport function isSingleQuoteLike(code: number): boolean {\n  return (\n    code === codeQuote ||\n    code === codeQuoteLeft ||\n    code === codeQuoteRight ||\n    code === codeGraveAccent ||\n    code === codeAcuteAccent\n  )\n}\n\n/**\n * Strip last occurrence of textToStrip from text\n */\nexport function stripLastOccurrence(\n  text: string,\n  textToStrip: string,\n  stripRemainingText = false\n): string {\n  const index = text.lastIndexOf(textToStrip)\n  return index !== -1\n    ? text.substring(0, index) + (stripRemainingText ? '' : text.substring(index + 1))\n    : text\n}\n\nexport function insertBeforeLastWhitespace(text: string, textToInsert: string): string {\n  let index = text.length\n\n  if (!isWhitespace(text.charCodeAt(index - 1))) {\n    // no trailing whitespaces\n    return text + textToInsert\n  }\n\n  while (isWhitespace(text.charCodeAt(index - 1))) {\n    index--\n  }\n\n  return text.substring(0, index) + textToInsert + text.substring(index)\n}\n\nexport function removeAtIndex(text: string, start: number, count: number) {\n  return text.substring(0, start) + text.substring(start + count)\n}\n\n/**\n * Test whether a string ends with a newline or comma character and optional whitespace\n */\nexport function endsWithCommaOrNewline(text: string): boolean {\n  return /[,\\n][ \\t\\r]*$/.test(text)\n}\n"],"mappings":"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"}